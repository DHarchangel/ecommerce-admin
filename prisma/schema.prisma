// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id  String  @id  @default(uuid())
  name String
  userId String
  billboards Billboard[] @relation("storeToBillboard")
  products Product[] @relation("storeToProduct")
  category Category[] @relation("storeToCategory")
  sizes Size[] @relation("storeToSize")
  colors Color[] @relation("storeToColor")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Billboard {
  id  String  @id  @default(uuid())
  storeId String
  store Store @relation("storeToBillboard", fields: [storeId], references: [id])
  category Category[] @relation("billboardToCategory")
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}
model Category {
  id  String  @id  @default(uuid())
  storeId String
  store Store @relation("storeToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation("billboardToCategory", fields: [billboardId], references: [id])
  product Product[] @relation("categoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}
model Size {
  id  String  @id  @default(uuid())
  storeId String
  store Store @relation("storeToSize", fields: [storeId], references: [id])
  products Product[]
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}
model Color {
  id  String  @id  @default(uuid())
  storeId String
  store Store @relation("storeToColor", fields: [storeId], references: [id])
  products Product[]
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id  String  @id  @default(uuid())
  storeId String
  store Store @relation("storeToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("categoryToProduct", fields: [categoryId], references: [id])
  sizeId String
  size Size @relation( fields: [sizeId], references: [id])
  colorId String
  color Color? @relation(fields:[colorId],references:[id])
  image Image[]
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])

}

model Image {
  id String @id @default(uuid())
  productId   String
  product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

@@index([productId])
}

